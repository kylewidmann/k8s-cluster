name: Release Charts

on:
  push:
    branches:
      - main
    paths:
      - 'charts/**'

jobs:
  release:
    runs-on: ubuntu-latest
    # Add permissions for GitHub Pages
    permissions:
      contents: write
      pages: write
      id-token: write
    
    # Environment for GitHub Pages
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.0

      - name: Install yq for YAML processing
        run: |
          sudo wget -O /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.35.1/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Create charts directory for packages
        run: |
           mkdir -p .deploy

          
      - name: Dynamically add Helm repositories
        run: |
          # Create a temporary file to track added repositories
          touch added_repos.txt
          
          # Function to add repository if not already added
          add_repo_if_needed() {
            local repo_name=$1
            local repo_url=$2
            
            # Skip if repository URL is @ or file:// or empty
            if [[ "$repo_url" == "@"* || "$repo_url" == "file://"* || -z "$repo_url" ]]; then
              echo "Skipping local repository: $repo_url"
              return
            fi
            
            # Extract repository name from URL or use provided name
            local effective_repo_name="$repo_name"
            if [ -z "$effective_repo_name" ]; then
              effective_repo_name=$(echo "$repo_url" | sed -E 's|^https?://||g' | sed -E 's|/.*$||g' | sed -E 's|\.[^.]*\.[^.]*$||g' | sed -E 's|\.[^.]*$||g')
            fi
            
            # Ensure we have a valid name
            if [ -z "$effective_repo_name" ]; then
              effective_repo_name="repo-$(date +%s%N | md5sum | head -c 8)"
            fi
            
            if ! grep -q "^$effective_repo_name|$repo_url$" added_repos.txt; then
              echo "Adding repository: $effective_repo_name ($repo_url)"
              helm repo add "$effective_repo_name" "$repo_url"
              echo "$effective_repo_name|$repo_url" >> added_repos.txt
            fi
          }
          
          # Process repositories from chart dependencies
          process_chart_dependencies() {
            local chart_path=$1
            
            if [ -f "$chart_path/Chart.yaml" ]; then
              echo "Processing dependencies for $(basename $chart_path)"
              
              # Check if the chart has dependencies
              if yq e '.dependencies' "$chart_path/Chart.yaml" | grep -q -v "null"; then
                # Extract all dependencies
                count=$(yq e '.dependencies | length' "$chart_path/Chart.yaml")
                
                # Process each dependency
                for i in $(seq 0 $((count-1))); do
                  name=$(yq e ".dependencies[$i].name" "$chart_path/Chart.yaml")
                  repo=$(yq e ".dependencies[$i].repository" "$chart_path/Chart.yaml")
                  
                  # Derive repo name from the name field if it contains a slash
                  repo_name=""
                  if [[ "$name" == *"/"* ]]; then
                    repo_name=$(echo "$name" | cut -d'/' -f1)
                  fi
                  
                  # Add the repository
                  add_repo_if_needed "$repo_name" "$repo"
                done
              else
                echo "No dependencies found in $chart_path/Chart.yaml"
              fi
            fi
          }
          
          # Process dependencies for all charts
          for chart in charts/*; do
            if [ -d "$chart" ]; then
              process_chart_dependencies "$chart"
            fi
          done
          
          # Update all repositories
          helm repo update
          
          # List all repositories
          echo "Current repositories:"
          helm repo list

      - name: Update Helm dependencies
        run: |
          for chart in charts/*; do
            if [ -d "$chart" ] && [ -f "$chart/Chart.yaml" ]; then
              echo "Updating dependencies for $chart"
              helm dependency update "$chart"
              # List dependencies to verify
              if [ -d "$chart/charts" ]; then
                echo "Dependencies downloaded for $(basename $chart):"
                ls -la "$chart/charts"
              fi
            fi
          done

      - name: Package charts
        run: |
          for chart in charts/*; do
            if [ -d "$chart" ]; then
              echo "Packaging $chart"
              helm package "$chart" -d .deploy
            fi
          done

      - name: Fetch existing index file
        run: |
          # Try to get existing index.yaml if it exists
          curl -s -f -o existing_index.yaml https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/index.yaml || true

      - name: Create/Update index
        run: |
          if [ -f "existing_index.yaml" ]; then
            echo "Using existing index.yaml for merging"
            helm repo index .deploy --merge existing_index.yaml --url https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/
          else
            echo "Creating new index.yaml"
            helm repo index .deploy --url https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/
          fi
          rm -f existing_index.yaml

      # Copy the landing page from the repository
      - name: Copy landing page
        run: |
          # Copy the index.html file from the repository
          cp index.html .deploy/
          
          # Create .nojekyll file to prevent GitHub Pages from processing with Jekyll
          touch .deploy/.nojekyll

      - name: Setup GitHub Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: .deploy

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4