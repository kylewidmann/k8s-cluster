---
- name: Enforce minimum Ansible version
  ansible.builtin.assert:
    that:
      - ansible_version.full is version('2.14', '>=')
    msg: "Minimum ansible-core version required is 2.14"

- name: Update apt cache
  apt:
    update_cache: yes
    cache_valid_time: 3600
  when: ansible_os_family == "Debian"

- name: Install system packages
  package:
    name: "{{ system_packages }}"
    state: present

- name: Install Dependent Ubuntu Packages
  when: ansible_distribution in ['Ubuntu']
  ansible.builtin.apt:
    name: policycoreutils  # Used by install script to restore SELinux context
    update_cache: true

- name: Set timezone
  timezone:
    name: "{{ timezone }}"

- name: Disable swap
  block:
    - name: Disable swap - command
      command: swapoff -a
      when: swap_disable
      
    - name: Disable swap - fstab
      replace:
        path: /etc/fstab
        regexp: '^([^#].*\sswap\s+.*)$'
        replace: '# \1'
      when: swap_disable

- name: Populate service facts
  ansible.builtin.service_facts:

- name: Allow UFW Exceptions for Standalone K3s
  when:
    - ansible_facts.services['ufw'] is defined
    - ansible_facts.services['ufw'].state == 'running'
  block:
    - name: Get ufw status
      ansible.builtin.command:
        cmd: ufw status
      changed_when: false
      register: ufw_status

    - name: If ufw enabled, ensure SSH is allowed
      when:
        - ufw_status['stdout'] == "Status':' active"
      community.general.ufw:
        rule: allow
        port: "{{ ansible_port | default('22') }}"
        proto: tcp
        comment: "SSH for Ansible"

    - name: If ufw enabled, open Kubernetes API port
      when:
        - ufw_status['stdout'] == "Status':' active"
      community.general.ufw:
        rule: allow
        port: "{{ api_port | default('6443') }}"
        proto: tcp
        comment: "Kubernetes API Server"

    - name: Allow for Karmada control plane (only for Karmada host)
      when:
        - ufw_status['stdout'] == "Status':' active"
        - inventory_hostname in groups['karmada'] | default([])
      community.general.ufw:
        rule: allow
        port: "{{ item.port }}"
        proto: "{{ item.proto }}"
        comment: "{{ item.comment }}"
      loop:
        - { port: "32000", proto: "tcp", comment: "Karmada API Server" }
        - { port: "2379", proto: "tcp", comment: "etcd client" }

    - name: If ufw enabled, allow pod and service networks
      when:
        - ufw_status['stdout'] == "Status':' active"
      community.general.ufw:
        rule: allow
        src: '{{ item }}'
        comment: "Kubernetes networks"
      loop: "{{ ((cluster_cidr | default('10.42.0.0/16')) + ',' + (service_cidr | default('10.43.0.0/16'))) | split(',') }}"

- name: Allow Firewalld Exceptions for Standalone K3s
  when:
    - ansible_facts.services['firewalld.service'] is defined
    - ansible_facts.services['firewalld.service'].state == 'running'
  block:
    - name: If firewalld enabled, ensure SSH is allowed
      ansible.posix.firewalld:
        service: ssh
        zone: public
        state: enabled
        permanent: true
        immediate: true

    - name: If firewalld enabled, open Kubernetes API port
      ansible.posix.firewalld:
        port: "{{ api_port | default('6443') }}/tcp"
        zone: public
        state: enabled
        permanent: true
        immediate: true

    - name: Allow for Karmada control plane (only for Karmada host)
      when: inventory_hostname in groups['karmada'] | default([])
      ansible.posix.firewalld:
        port: "{{ item }}/tcp"
        zone: public
        state: enabled
        permanent: true
        immediate: true
      with_items:
        - "32000"  # Karmada API Server
        - "2379"   # etcd client

    - name: Allow pod and service networks
      ansible.posix.firewalld:
        source: "{{ item }}"
        zone: trusted
        state: enabled
        permanent: true
        immediate: true
      loop: "{{ ((cluster_cidr | default('10.42.0.0/16')) + ',' + (service_cidr | default('10.43.0.0/16'))) | split(',') }}"

    - name: Allow local traffic
      ansible.posix.firewalld:
        source: "127.0.0.1/8"
        zone: trusted
        state: enabled
        permanent: true
        immediate: true

# Configure sysctl for Kubernetes
- name: Configure sysctl for Kubernetes
  sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    state: present
    reload: yes
  with_items:
    - { name: 'net.bridge.bridge-nf-call-iptables', value: '1' }
    - { name: 'net.bridge.bridge-nf-call-ip6tables', value: '1' }
    - { name: 'net.ipv4.ip_forward', value: '1' }
  ignore_errors: true

# Fix for 'br_netfilter not found' errors
- name: Add br_netfilter to /etc/modules-load.d/
  ansible.builtin.copy:
    content: "br_netfilter"
    dest: /etc/modules-load.d/br_netfilter.conf
    mode: "u=rw,g=,o="

- name: Load br_netfilter module - first attempt
  community.general.modprobe:
    name: br_netfilter
    state: present
  ignore_errors: true
  register: br_module_load

- name: Force load br_netfilter with fallback method
  when: br_module_load is failed
  block:
    - name: Attempt to load module using modprobe directly
      ansible.builtin.command: modprobe br_netfilter
      ignore_errors: true
      
    - name: Verify br_netfilter status
      ansible.builtin.command: lsmod | grep br_netfilter
      register: br_module_check
      ignore_errors: true
      changed_when: false
      
    - name: Display warning if module still not loaded
      when: br_module_check is failed
      ansible.builtin.debug:
        msg: "WARNING: Could not load br_netfilter module. May need to enable bridge netfilter in kernel."

# Load overlay module
- name: Load overlay module
  community.general.modprobe:
    name: overlay
    state: present
  ignore_errors: true

- name: Ensure modules load at boot
  copy:
    content: |
      br_netfilter
      overlay
    dest: /etc/modules-load.d/kubernetes.conf
    mode: '0644'

# AppArmor configuration
- name: Check for Apparmor existence
  ansible.builtin.stat:
    path: /sys/module/apparmor/parameters/enabled
  register: apparmor_enabled

- name: Check if Apparmor is enabled
  when: apparmor_enabled.stat.exists
  ansible.builtin.command: cat /sys/module/apparmor/parameters/enabled
  register: apparmor_status
  changed_when: false

- name: Install Apparmor Parser [Suse]
  when:
    - ansible_os_family == 'Suse'
    - apparmor_status is defined
    - apparmor_status.stdout == "Y"
  ansible.builtin.package:
    name: apparmor-parser
    state: present

- name: Install Apparmor Parser [Debian]
  when:
    - ansible_distribution == 'Debian'
    - ansible_facts['distribution_major_version'] == "11"
    - apparmor_status is defined
    - apparmor_status.stdout == "Y"
  ansible.builtin.package:
    name: apparmor
    state: present

- name: Gather the package facts
  ansible.builtin.package_facts:
    manager: auto

# Iptables check for K3s compatibility
- name: If iptables v1.8.0-1.8.4, warn user  # noqa ignore-errors
  when:
    - ansible_facts.packages['iptables'] is defined
    - ansible_facts.packages['iptables'][0]['version'] is version('1.8.5', '<')
    - ansible_facts.packages['iptables'][0]['version'] is version('1.7.9', '>')
  ansible.builtin.fail:
    msg:
      - "Warning: Iptables {{ ansible_facts.packages['iptables'][0]['version'] }} found."
      - "Add '--prefer-bundled-bin' to extra_server_args variable to use the bundled iptables binary."
  ignore_errors: true

- name: Add /usr/local/bin to sudo secure_path
  ansible.builtin.lineinfile:
    line: 'Defaults    secure_path = /sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin'
    regexp: "Defaults(\\s)*secure_path(\\s)*="
    state: present
    insertafter: EOF
    path: /etc/sudoers
    validate: 'visudo -cf %s'
  when: ansible_os_family == 'RedHat'

# Setup alternative K3s directory if specified
- name: Setup alternative K3s directory
  when:
    - k3s_server_location is defined
    - k3s_server_location != "/var/lib/rancher/k3s"
  block:
    - name: Make rancher directory
      ansible.builtin.file:
        path: "/var/lib/rancher"
        mode: "0755"
        state: directory
    - name: Create symlink
      ansible.builtin.file:
        dest: /var/lib/rancher/k3s
        src: "{{ k3s_server_location }}"
        force: true
        state: link

# Setup extra manifests if defined
- name: Setup extra manifests
  when: extra_manifests is defined
  block:
    - name: Make manifests directory
      ansible.builtin.file:
        path: "/var/lib/rancher/k3s/server/manifests"
        mode: "0700"
        state: directory
    - name: Copy manifests
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "/var/lib/rancher/k3s/server/manifests"
        mode: "0600"
      loop: "{{ extra_manifests }}"

# # Configure additional security for standalone clusters
# - name: Configure additional security for standalone K3s
#   block:
#     - name: Ensure K3s service directory exists
#       ansible.builtin.file:
#         path: /etc/systemd/system/k3s.service.d
#         state: directory
#         mode: '0755'
      
#     - name: Add security-related systemd drop-in
#       ansible.builtin.copy:
#         dest: /etc/systemd/system/k3s.service.d/10-security.conf
#         content: |
#           [Service]
#           # Add additional security hardening for standalone node
#           ReadOnlyPaths=/etc
#           ProtectSystem=strict
#           ProtectHome=true
#           PrivateTmp=true
#           NoNewPrivileges=true
#         mode: '0644'
#       register: security_drop_in
      
#     - name: Reload systemd if drop-in was added
#       ansible.builtin.systemd:
#         daemon_reload: yes
#       when: security_drop_in.changed

# Setup optional private registry configuration
- name: Setup optional private registry configuration
  when: registries_config_yaml is defined
  block:
    - name: Make k3s config directory
      ansible.builtin.file:
        path: "/etc/rancher/k3s"
        mode: "0755"
        state: directory
    - name: Copy config values
      ansible.builtin.copy:
        content: "{{ registries_config_yaml }}"
        dest: "/etc/rancher/k3s/registries.yaml"
        mode: "0644"