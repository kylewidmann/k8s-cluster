---
- name: Setup single node k3s
  block:
    - name: Create service environment file directory
      ansible.builtin.file:
        path: "{{ systemd_dir | default('/etc/systemd/system') }}"
        state: directory
        mode: "0755"

    - name: Ensure service environment file exists
      ansible.builtin.file:
        path: "{{ systemd_dir | default('/etc/systemd/system') }}/k3s.service.env"
        state: touch
        mode: "0644"
      changed_when: false

    - name: Create K3s data directory
      ansible.builtin.file:
        path: /var/lib/rancher/k3s
        state: directory
        mode: "0755"
        owner: root
        group: root

    - name: Copy K3s service file for single node
      ansible.builtin.template:
        src: k3s-single.service.j2
        dest: "{{ systemd_dir | default('/etc/systemd/system') }}/k3s.service"
        owner: root
        group: root
        mode: "0644"
      register: service_file_single

    - name: Create empty service env file if it doesn't exist yet
      ansible.builtin.file:
        path: "{{ systemd_dir | default('/etc/systemd/system') }}/k3s.service.env"
        state: touch
        mode: "0644"
        owner: root
        group: root
      changed_when: false

    - name: Add service environment variables
      when: extra_service_envs is defined
      ansible.builtin.lineinfile:
        path: "{{ systemd_dir | default('/etc/systemd/system') }}/k3s.service.env"
        line: "{{ item }}"
      with_items: "{{ extra_service_envs }}"

    - name: Delete any existing token from the environment if different from the new one
      when: token is defined
      ansible.builtin.lineinfile:
        state: absent
        path: "{{ systemd_dir | default('/etc/systemd/system') }}/k3s.service.env"
        regexp: ^K3S_TOKEN=\s*(?!{{ token | regex_escape }}\s*$)

    - name: Add token as an environment variable
      when: token is defined
      no_log: true
      ansible.builtin.lineinfile:
        path: "{{ systemd_dir | default('/etc/systemd/system') }}/k3s.service.env"
        line: K3S_TOKEN={{ token }}

    - name: Restart K3s service
      when:
        - ansible_facts.services['k3s.service'] is defined
        - ansible_facts.services['k3s.service'].state == 'running'
        - service_file_single.changed or _server_config_result is defined and _server_config_result.changed
      ansible.builtin.systemd:
        name: k3s
        daemon_reload: true
        state: restarted

    - name: Enable and check K3s service
      when: ansible_facts.services['k3s.service'] is not defined or ansible_facts.services['k3s.service'].state != 'running'
      ansible.builtin.systemd:
        name: k3s
        daemon_reload: true
        state: started
        enabled: true

    - name: Wait for k3s to be ready
      ansible.builtin.wait_for:
        path: /etc/rancher/k3s/k3s.yaml
        state: present
        timeout: 300

    - name: Get Certs
      ansible.builtin.shell:
        cmd: |
          set -o pipefail
          openssl x509 -in /var/lib/rancher/k3s/server/tls/serving-kube-apiserver.crt -text -noout | grep -A1 "Subject Alternative Name"
        executable: /bin/bash
      register: cert_hosts
      changed_when: false
      failed_when: false

    - name: Debug Certs
      ansible.builtin.debug:
        msg: "{{ cert_hosts.stdout }}"

    - name: Verify single node k3s status
      ansible.builtin.command:
        cmd: k3s kubectl get nodes
      changed_when: false
