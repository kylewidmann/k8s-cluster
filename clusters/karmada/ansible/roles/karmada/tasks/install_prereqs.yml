---
- name: Check if Helm is already installed
  command: helm version --short
  register: helm_version_result
  ignore_errors: true
  changed_when: false

- name: Get system architecture
  command: uname -m
  register: arch_result
  changed_when: false

- name: Install Helm if not already installed
  block:

    - name: Set architecture variable
      set_fact:
        helm_arch: "{{ 'arm64' if 'arm64' in arch_result.stdout or 'aarch64' in arch_result.stdout else 'amd64' }}"

    - name: Download Helm for detected architecture
      get_url:
        url: "https://get.helm.sh/helm-{{ helm_version }}-linux-{{ helm_arch }}.tar.gz"
        dest: "/tmp/helm.tar.gz"
        mode: '0644'
      
    - name: Create Helm temp directory
      file:
        path: "/tmp/helm"
        state: directory
        mode: '0755'
      
    - name: Extract Helm
      unarchive:
        src: "/tmp/helm.tar.gz"
        dest: "/tmp/helm"
        remote_src: true
      
    - name: Install Helm binary
      copy:
        src: "/tmp/helm/linux-{{ helm_arch }}/helm"
        dest: "/usr/local/bin/helm"
        mode: '0755'
        remote_src: true
      become: true
      
    - name: Clean up Helm installation files
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "/tmp/helm"
        - "/tmp/helm.tar.gz"
  when: helm_version_result.rc != 0

- name: Create temp kubeconfig directory
  file:
    path: "{{ kubeconfig_temp_dir }}"
    state: directory
    mode: '0700'

- name: Check if kubectl-karmada is already installed
  command: kubectl-karmada version
  register: kubectl_karmada_result
  ignore_errors: true
  changed_when: false

- name: Install kubectl-karmada
  block:

    - name: Set architecture variable
      set_fact:
        karmada_arch: "{{ 'arm64' if 'arm64' in arch_result.stdout or 'aarch64' in arch_result.stdout else 'amd64' }}"

    - name: Download kubectl-karmada
      get_url:
        url: "https://github.com/karmada-io/karmada/releases/download/{{ kubectl_karmada_version }}/kubectl-karmada-linux-{{ karmada_arch }}.tgz"
        dest: "/tmp/kubectl-karmada.tgz"
        mode: '0644'
      
    - name: Extract kubectl-karmada
      unarchive:
        src: "/tmp/kubectl-karmada.tgz"
        dest: "/tmp"
        remote_src: true
      
    - name: Install kubectl-karmada
      copy:
        src: "/tmp/kubectl-karmada"
        dest: "/usr/local/bin/kubectl-karmada"
        mode: '0755'
        remote_src: true
      become: true
      
    - name: Clean up kubectl-karmada installation files
      file:
        path: "/tmp/kubectl-karmada.tgz"
        state: absent
  when: kubectl_karmada_result.rc != 0