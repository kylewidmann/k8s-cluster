---

- name: Update MicroK8s API server certificates to include host public IP
  hosts: control_plane
  become: true
  tasks:

    - name: Set additional IP
      ansible.builtin.set_fact:
        additional_ip: '{{ ansible_host }}'

    - name: Debug additional IP
      ansible.builtin.debug:
        msg: '{{ additional_ip }}'

    - name: Stop MicroK8s service
      ansible.builtin.command: microk8s stop
      register: stop_result
      failed_when: stop_result.rc != 0 and "not running" not in stop_result.stderr
      changed_when: stop_result == 0

    - name: Check if csr.conf.template exists
      ansible.builtin.stat:
        path: /var/snap/microk8s/current/certs/csr.conf.template
      register: csr_conf_template

    - name: Backup original csr.conf.template
      ansible.builtin.copy:
        src: /var/snap/microk8s/current/certs/csr.conf.template
        dest: /var/snap/microk8s/current/certs/csr.conf.template.bak
        remote_src: true
        mode: '0644'
      when: csr_conf_template.stat.exists

    # Update to not assume 2 existing IPs

    - name: Update csr.conf.template with additional IP
      ansible.builtin.lineinfile:
        path: /var/snap/microk8s/current/certs/csr.conf.template
        line: IP.3 = {{ additional_ip }}
        insertafter: '#MOREIPS'
        state: present
      when: csr_conf_template.stat.exists
      register: template_updated

    - name: Refresh certificates after updating template
      ansible.builtin.command: microk8s refresh-certs --cert server.crt
      when: csr_conf_template.stat.exists and template_updated.changed
      register: refresh_result
      changed_when: refresh_result == 0

    - name: Start MicroK8s service
      ansible.builtin.command: microk8s start
      register: start_result
      failed_when: start_result.rc != 0
      changed_when: start_result.rc == 0

    - name: Wait for MicroK8s to be ready
      ansible.builtin.command: microk8s status --wait-ready
      register: status_result
      retries: 5
      delay: 10
      until: status_result.rc == 0
      changed_when: false

    - name: Verify the certificate now includes the additional IP
      ansible.builtin.shell:
        cmd: |
          set -o pipefail
          openssl x509 -in /var/snap/microk8s/current/certs/server.crt -text | grep -A1 'Subject Alternative Name' | grep -o '{{ additional_ip }}'
        executable: /bin/bash
      register: verify_result
      failed_when: false
      changed_when: false

    - name: Report certificate status
      ansible.builtin.debug:
        msg: Certificate {{ 'includes' if verify_result.rc == 0 else 'does NOT include' }} the additional IP {{ additional_ip }}


- name: Setup kubectl on control node
  hosts: control_plane
  tasks:
    - name: Check whether kubectl is installed on control node
      delegate_to: 127.0.0.1
      become: false
      ansible.builtin.command: kubectl
      register: kubectl_installed
      ignore_errors: true
      changed_when: false

    - name: Verify kubeconfig dir exists
      when: kubectl_installed.rc == 0
      delegate_to: 127.0.0.1
      become: false
      ansible.builtin.file:
        path: '{{ kubeconfig_dir }}'
        state: directory
        mode: '0750'

    - name: Apply K3S kubeconfig to control node
      when: kubectl_installed.rc == 0
      vars:
        cluster_context: '{{ inventory_hostname }}'
        kubeconfig: '{{ kubeconfig_dir }}/microk8s-{{ inventory_hostname }}'
      block:

        - name: Copy kubeconfig to control node
          ansible.builtin.fetch:
            src: /home/{{ ansible_user }}/.kube/config
            dest: '{{ kubeconfig }}'
            flat: true

        - name: Change server address in kubeconfig on control node
          ansible.builtin.shell: |
            KUBECONFIG={{ kubeconfig }} kubectl config set-cluster microk8s-cluster --server=https://{{ ansible_host }}:{{ api_port | default('16443') }}
          delegate_to: 127.0.0.1
          become: false
          register: csa_result
          changed_when:
            - csa_result.rc == 0

        - name: Change context name in kubeconfig on control node
          ansible.builtin.replace:
            path: '{{ kubeconfig }}'
            regexp: ': microk8s'
            replace: ': microk8s-{{ cluster_context }}'
          delegate_to: 127.0.0.1
          become: false

        - name: Merge with any existing kubeconfig on control node
          ansible.builtin.shell: |
            TFILE=$(mktemp)
            mkdir -p ~/.kube
            touch ~/.kube/config
            KUBECONFIG={{ kubeconfig }}:~/.kube/config kubectl config view --flatten > ${TFILE}
            mv ${TFILE} ~/.kube/config
          delegate_to: 127.0.0.1
          become: false
          register: mv_result
          changed_when:
            - mv_result.rc == 0
