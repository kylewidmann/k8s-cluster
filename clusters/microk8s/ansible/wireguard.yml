---

- name: Network connectivity verification
  hosts: all
  become: true
  any_errors_fatal: true
  tasks:

    - name: Create temporary test file
      ansible.builtin.file:
        path: /tmp/connectivity-test
        state: touch
        mode: '0644'
      changed_when: false

    - name: Get public/external IP address
      ansible.builtin.uri:
        url: https://ifconfig.me
        return_content: true
      register: public_ip
      changed_when: false
      ignore_errors: true

    - name: Set detected public IP
      ansible.builtin.set_fact:
        detected_public_ip: '{{ public_ip.stdout }}'
      when: public_ip.rc == 0

    - name: Verify detected IP matches inventory IP
      ansible.builtin.debug:
        msg: "Warning: Detected public IP ({{ detected_public_ip }}) doesn't match inventory ansible_host \
          ({{ ansible_host }}). This might cause connectivity issues."
      when:
        - public_ip.rc == 0
        - detected_public_ip != ansible_host
        - cross_network | bool

    - name: Configure firewall for MicroK8s and WG
      community.general.ufw:
        rule: allow
        port: '{{ item }}'
        proto: tcp
      loop: '{{ firewall_ports }}'
      when: cross_network | bool

    - name: Enable UFW
      community.general.ufw:
        state: enabled
        policy: deny
      when: cross_network | bool

- name: Setup WireGuard VPN for cross-network communication
  hosts: all
  become: true
  tasks:

    - name: Set Wireguard IPs
      ansible.builtin.set_fact:
        wireguard_ip: 10.10.10.{{ (groups['all'].index(inventory_hostname) + 1) }}

    - name: Set primary node wireguard IP
      ansible.builtin.set_fact:
        primary_node: "{{ groups['control_plane'][0] }}"
        primary_wg_ip: "{{ hostvars[groups['control_plane'][0]].wireguard_ip }}"

    - name: Ensure ping is installed
      ansible.builtin.apt:
        name:
          - iputils-ping
        state: present

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: true

    - name: Install Wireguard
      ansible.builtin.apt:
        name: wireguard
        state: present

    - name: Generate WireGuard private key
      ansible.builtin.command: wg genkey
      register: wg_private_key
      changed_when: false
      when: cross_network | bool

    - name: Store WireGuard private key
      ansible.builtin.set_fact:
        wg_private: '{{ wg_private_key.stdout }}'
      when: cross_network | bool

    - name: Debug WG private
      ansible.builtin.debug:
        msg: '{{ wg_private is defined }}'
      when: wg_private is defined

    - name: Generate WireGuard public key
      ansible.builtin.shell:
        cmd: |
          set -o pipefail
          echo "{{ wg_private }}" | wg pubkey
      register: wg_public_key
      changed_when: false
      when: cross_network | bool

    - name: Store WireGuard public key
      ansible.builtin.set_fact:
        wg_public: '{{ wg_public_key.stdout }}'
      when: cross_network | bool

    - name: Debug WG public
      ansible.builtin.debug:
        msg: '{{ wg_public is defined }}'
      when: wg_public is defined

    - name: Share public keys with other hosts
      ansible.builtin.set_fact:
        public_keys: '{{ public_keys | default({}) | combine({inventory_hostname: wg_public}) }}'
      when: cross_network | bool
      delegate_to: localhost
      delegate_facts: true

    - name: Create WireGuard configuration directory
      ansible.builtin.file:
        path: /etc/wireguardprimary_node
        state: directory
        mode: '0700'
      when: cross_network | bool

    - name: Show WG config
      ansible.builtin.debug:
        msg: "{{ lookup('ansible.builtin.template', 'wg0.conf.j2') }}"

    - name: Create WireGuard configuration
      ansible.builtin.template:
        src: wg0.conf.j2
        dest: /etc/wireguard/wg0.conf
        owner: root
        group: root
        mode: '0600'
      when: cross_network | bool

    - name: Start WireGuard
      ansible.builtin.systemd:
        name: wg-quick@wg0
        enabled: true
        state: started
      when: cross_network | bool

    - name: Set MTU for Wireguard interface
      ansible.builtin.command: ip link set mtu {{ wireguard_mtu | default(1380) }} dev wg0
      become: true
      changed_when: false

    - name: Restart WG
      ansible.builtin.shell: wg-quick down wg0 && wg-quick up wg0
      changed_when: false

    - name: Wait for WireGuard interface to be up
      ansible.builtin.wait_for:
        path: /sys/class/net/wg0/operstate
      when: cross_network | bool
      changed_when: false

    - name: Ping primary node from non-primary nodes
      ansible.builtin.command: ping -c 1 {{ primary_wg_ip }}
      register: ping_result
      until: ping_result.rc == 0
      retries: 3
      delay: 5
      when: not inventory_hostname == primary_node
      failed_when: ping_result.rc != 0
      changed_when: false

    - name: Fail if primary node is not pingable
      ansible.builtin.fail:
        msg: Cannot ping primary node at {{ primary_wg_ip }} from {{ inventory_hostname }}
      when:
        - not inventory_hostname == primary_node
        - ping_result.failed
