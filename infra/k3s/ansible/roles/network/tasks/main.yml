# site.yml
---

- name: Create temporary test file
  file:
    path: /tmp/connectivity-test
    state: touch
    mode: '0644'
  changed_when: false

- name: Get public/external IP address
  shell: "curl -s https://ifconfig.me || wget -qO- https://ifconfig.me"
  register: public_ip
  changed_when: false
  ignore_errors: yes

- name: Set detected public IP
  set_fact:
    detected_public_ip: "{{ public_ip.stdout }}"
  when: public_ip.rc == 0

- name: Verify detected IP matches inventory IP
  debug:
    msg: "Warning: Detected public IP ({{ detected_public_ip }}) doesn't match inventory ansible_host ({{ ansible_host }}). This might cause connectivity issues."
  when:
    - public_ip.rc == 0
    - detected_public_ip != ansible_host
    - cross_network | bool

  # - name: Configure firewall for MicroK8s and WG
  #   ufw:
  #     rule: allow
  #     port: "{{ item }}"
  #     proto: tcp
  #   loop: "{{ firewall_ports }}"
  #   when: cross_network | bool

  # - name: Enable UFW
  #   ufw:
  #     state: enabled
  #     policy: deny
  #   when: cross_network | bool

# - name: Setup WireGuard VPN for cross-network communication
#   hosts: all
#   become: yes
#   tasks:

- name: Set Wireguard IPs
  set_fact:
    wireguard_ip: "10.10.10.{{ (groups['k3s_cluster'].index(inventory_hostname) + 1) }}"


- name: Set primary node wireguard IP
  set_fact:
    primary_node: "{{ groups['server'][0] }}"
    primary_wg_ip: "{{ hostvars[groups['server'][0]].wireguard_ip }}"

- name: Ensure ping is installed
  apt:
    name:
      - iputils-ping
    state: present

- name: Update apt cache
  apt:
    update_cache: yes

- name: Install Wireguard
  apt:
    name: wireguard
    state: present

- name: Generate WireGuard private key
  shell: wg genkey
  register: wg_private_key
  changed_when: false
  when: cross_network | bool

- name: Store WireGuard private key
  set_fact:
    wg_private: "{{ wg_private_key.stdout }}"
  when: cross_network | bool

- name: Debug WG private
  debug:
    msg: "{{ wg_private is defined }}"
  when: wg_private is defined

- name: Generate WireGuard public key
  shell: echo "{{ wg_private }}" | wg pubkey
  register: wg_public_key
  changed_when: false
  when: cross_network | bool

- name: Store WireGuard public key
  set_fact:
    wg_public: "{{ wg_public_key.stdout }}"
  when: cross_network | bool

- name: Debug WG public
  debug:
    msg: "{{ wg_public is defined }}"
  when: wg_public is defined

- name: Share public keys with other hosts
  set_fact:
    public_keys: "{{ public_keys | default({}) | combine({inventory_hostname: wg_public}) }}"
  when: cross_network | bool
  delegate_to: localhost
  delegate_facts: true

- name: Create WireGuard configuration directory
  file:
    path: /etc/wireguardprimary_node
    state: directory
    mode: '0700'
  when: cross_network | bool

- name: Show WG config
  debug:
    msg: "{{ lookup('ansible.builtin.template', 'wg0.conf.j2') }}"
  # vars:
  #   node_index: "{{ groups['all'].index(inventory_hostname) }}"
  #   wireguard_cidr: "10.10.10.0/24"
  #   wireguard_ip: "10.10.10.{{ (node_index | int) + 1 }}"

- name: Create WireGuard configuration
  template:
    src: wg0.conf.j2
    dest: /etc/wireguard/wg0.conf
    owner: root
    group: root
    mode: '0600'
  when: cross_network | bool
  # vars:
  #   node_index: "{{ groups['all'].index(inventory_hostname) }}"
  #   wireguard_cidr: "10.10.10.0/24"
  #   wireguard_ip: "10.10.10.{{ (node_index | int) + 1 }}"

- name: Start WireGuard
  systemd:
    name: wg-quick@wg0
    enabled: yes
    state: started
  when: cross_network | bool

- name: Set MTU for Wireguard interface
  command: ip link set mtu {{ wireguard_mtu | default(1380) }} dev wg0
  become: true

- name: Restart WG
  shell: wg-quick down wg0 && wg-quick up wg0

- name: Wait for WireGuard interface to be up
  wait_for:
    path: /sys/class/net/wg0/operstate
  when: cross_network | bool

- name: Ping primary node from non-primary nodes
  command: ping -c 1 {{ primary_wg_ip }}
  register: ping_result
  until: ping_result.rc == 0
  retries: 3
  delay: 5
  when: not inventory_hostname == primary_node
  failed_when: ping_result.rc != 0

- name: Fail if primary node is not pingable
  fail:
    msg: "Cannot ping primary node at {{ primary_wg_ip }} from {{ inventory_hostname }}"
  when:
    - not inventory_hostname == primary_node
    - ping_result.failed